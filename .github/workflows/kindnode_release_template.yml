#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: kindnode_release_template
on:
  push:
    branches: [ kindnode_release_template ]
  workflow_call:
    inputs:
      repo:
        description: 'source repo of kubernetes '
        required: false
        default: "kubernetes/kubernetes"
        type: string
      ref:
        description: 'source ref of kubernetes '
        required: false
        default: "master"
        type: string
      maketag:
        description: 'is it need to make a describe tag'
        required: false
        default: true
        type: boolean
      tagWithKind:
        description: 'is it need to add kind version for tag'
        required: false
        default: true
        type: boolean
      kindVersion:
        description: 'version of kind,latest by default.'
        required: false
        default: "latest"
        type: string
      triggerIssueCommentId:
        description: 'triggerIssueCommentId'
        required: false
        default: 0
        type: number
      triggerDiscussionCommentId:
        description: 'triggerDiscussionCommentId'
        required: false
        default: 0
        type: number
      discussionId:
        description: 'discussionId'
        required: false
        default: 0
        type: number
      imgrepo:
        description: 'kindest/node'
        required: false
        default: "kindest/node"
        type: string

env:
  GH_TOKEN: ${{ github.token }}

jobs:

  saverunid:
    name: saverunid-${{ inputs.repo }}
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    steps:

      - uses: oras-project/setup-oras@v1
        with:
          version: 1.1.0

      - name: saverunid 
        run: |
          touch /tmp/result.txt
          echo "discussionCommentId=${{ inputs.triggerDiscussionCommentId }}" >> /tmp/result.txt
          echo "discussionId=${{ inputs.discussionId }}" >> /tmp/result.txt
          mv /tmp/result.txt .
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          oras push ghcr.io/liangyuanpeng/lanactions/artifacts-kind:${{ github.run_id }} result.txt
          rm -f result.txt
          echo "cloning repo:"${{ inputs.repo }}


#TODO 只需要多一个job,用于初始化信息 把 workflow run ID 存起来就可以了
#TODO 在saverunid job 里面解析kindVersion,然后把结果拼接到release这个job里面，可以直观的看到kindVersion
  release:
    name: release-${{ inputs.ref }}
    runs-on: ubuntu-24.04
    needs: saverunid
    permissions:
      packages: write
    steps:

      - name: make default value
        id: genoutputs
        env:
          KINDVERSION: ${{ inputs.kindVersion }}
          REF: ${{ inputs.ref }}
          MAKETAG: ${{ inputs.maketag }}
        run: |
          sudo apt install -y tree
          echo "inputs.maketag:"${{ inputs.maketag }}
          echo "inputs.repo:"${{ inputs.repo }}
          export KIND_VERSION=${{ inputs.kindVersion }}
          if [ "${{ inputs.kindVersion }}" = "latest" ];then
            gh api repos/kubernetes-sigs/kind/tags --jq 'map(select(.name | contains("alpha") or contains("beta") | not)) | .[0].name' > kind.version
            cat kind.version
            KIND_VERSION=`cat kind.version`
            #KIND_VERSION=`gh api repos/kubernetes-sigs/kind/tags --jq 'map(select(.name | contains("alpha") or contains("beta") | not)) | .[0].name'`
            echo $KIND_VERSION
          fi
          if [ "${{ inputs.kindVersion }}" = "" ];then
            KIND_VERSION=`gh api repos/kubernetes-sigs/kind/tags --jq 'map(select(.name | contains("alpha") or contains("beta") | not)) | .[0].name'`
          fi
          if [ "$REF" = "" ];then
              echo "ref=master" >> "$GITHUB_OUTPUT"
          else
              echo "ref=$REF" >> "$GITHUB_OUTPUT"
          fi
          if [ "$MAKETAG" = "" ];then
              echo "maketag=true" >> "$GITHUB_OUTPUT"
          else
              echo "maketag=$MAKETAG" >> "$GITHUB_OUTPUT"
          fi
          echo "kindVersion=$KIND_VERSION" >> "$GITHUB_OUTPUT"

      - name: download kind
        run: |
          echo ${{ steps.genoutputs.outputs.kindversion }}
          wget -q https://github.com/kubernetes-sigs/kind/releases/download/${{ steps.genoutputs.outputs.kindversion }}/kind-linux-amd64
          chmod +x kind-linux-amd64
          mv kind-linux-amd64 /usr/local/bin/kind
          kind --version
          kind build node-image -h

      - uses: oras-project/setup-oras@v1
        with:
          version: 1.1.0

      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          #kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ steps.genoutputs.outputs.ref }}

      - name: make tag
        if: steps.genoutputs.outputs.maketag == 'true'
        run: |
          export TAG=`git describe --tags`
          echo "ref=$TAG" >> "$GITHUB_OUTPUT"

      - name: print
        run: |
          export IMGTAG=${{ steps.genoutputs.outputs.kindversion }}-${{ steps.genoutputs.outputs.ref }}
          if [ ${{ inputs.tagWithKind == false }} ];then 
            IMGTAG=${{ steps.genoutputs.outputs.ref }}
            echo "tagWithKind is false,tag not with kind version."
          fi
          if [ ${{ steps.genoutputs.outputs.maketag }} == true ];then
            IMGTAG=`git describe --tags`
            echo "maketag is true1"
          fi
          # if [[ ${{ steps.genoutputs.outputs.maketag }} = "true" ]];then
          #   echo "maketag is true2"
          #   IMGREF=`git describe --tags`
          #   IMGTAG=${{ steps.genoutputs.outputs.kindversion }}-$IMGREF
          # fi
          echo "maketag:"${{ steps.genoutputs.outputs.maketag }}
          echo "input:"${{ inputs.maketag }}
          echo "result:"$IMGTAG
          echo "tagWithKind:"${{ inputs.tagWithKind }}
          nohup docker rmi `docker images -aq` &

      - name: rebuild init message
        run: |
          export IMGTAG=${{ steps.genoutputs.outputs.kindversion }}-${{ steps.genoutputs.outputs.ref }}
          if [ ${{ inputs.tagWithKind == false }} ];then 
            IMGTAG=${{ steps.genoutputs.outputs.ref }}
            echo "tagWithKind is false,tag not with kind version."
          fi
          touch /tmp/result.txt
          if [[ ${{ steps.genoutputs.outputs.maketag }} ]];then
            IMGREF=`git describe --tags`
            IMGTAG=${{ steps.genoutputs.outputs.kindversion }}-$IMGREF
          fi
          echo "image=$IMAGE" > /tmp/result.txt
          echo "discussionCommentId=${{ inputs.triggerDiscussionCommentId }}" >> /tmp/result.txt
          echo "discussionId=${{ inputs.discussionId }}" >> /tmp/result.txt
          cp /tmp/result.txt .
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          oras push ghcr.io/liangyuanpeng/lanactions/artifacts-kind:${{ github.run_id }} result.txt
          rm -f result.txt


      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed, if set to "true" but frees about 6 GB
          tool-cache: false
          # all of these default to true, but feel free to set to "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: false

#TODO docker login action
      - name: build
        id: build
        run: |
          
          git branch
          git describe
          export IMGTAG=${{ steps.genoutputs.outputs.kindversion }}-${{ steps.genoutputs.outputs.ref }}
          if [ ${{ inputs.tagWithKind }} == false ];then 
            IMGTAG=${{ steps.genoutputs.outputs.ref }}
            echo "tagWithKind is false,tag not with kind version."
          fi
          if [[ ${{ steps.genoutputs.outputs.maketag }} == true  ]];then
            echo "maketag is true3"
            IMGREF=`git describe --tags`
            IMGTAG=${{ steps.genoutputs.outputs.kindversion }}-$IMGREF
          fi
          
          echo "maketag:"${{ steps.genoutputs.outputs.maketag }}
          echo "IMGTAG:"$IMGTAG

          IMAGE_EXIST=`oras manifest fetch ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:$IMGTAG  | grep schemaVersion | wc -l `
          if [ $IMAGE_EXIST -eq 1 ]; then
            echo "exist image of ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:$IMGTAG"
            exit 0
          else 
            echo "have not exist image of ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:$IMGTAG"
          fi

          mkdir tmp
          cd tmp
          #TODO 使用 kind 仓库的 hack/release/build/push-node.sh 来发布镜像, 可以构建 amd64&arm64 的镜像, 然后使用skopeo 来复制镜像到另一个 tag
          # kind build node-image ../kubernetes
          kind build node-image --image ghcr.io/liangyuanpeng/${{ inputs.imgrepo }}:$IMGTAG --kube-root $PWD/../
          docker images
          cd ../_output
          tree .
          docker login ghcr.io -u$GITHUB_REPOSITORY_OWNER -p${{ secrets.GITHUB_TOKEN }}
          docker push ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:$IMGTAG
          docker tag ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:$IMGTAG ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:${{ steps.genoutputs.outputs.kindversion }}-${{ steps.genoutputs.outputs.ref }}
          docker push ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:${{ steps.genoutputs.outputs.kindversion }}-${{ steps.genoutputs.outputs.ref }}
          export IMAGE=ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:$IMGTAG
          export IMAGE2=ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:${{ steps.genoutputs.outputs.kindversion }}-${{ steps.genoutputs.outputs.ref }}

          CHTIME=`date +"%Y%m%d%H"`
          if [[ ${{ steps.genoutputs.outputs.ref }} == "master" ]];then
            docker tag ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:$IMGTAG ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:${{ steps.genoutputs.outputs.kindversion }}-$CHTIME
            docker push ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:${{ steps.genoutputs.outputs.kindversion }}-$CHTIME

            docker tag ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:$IMGTAG ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:${{ steps.genoutputs.outputs.kindversion }}-latest
            docker push ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo }}:${{ steps.genoutputs.outputs.kindversion }}-latest
          fi
          
          #touch /tmp/result.txt
          echo "image=$IMAGE" > /tmp/result.txt
          echo "image2=$IMAGE2" >> /tmp/result.txt
          echo "discussionCommentId=${{ inputs.triggerDiscussionCommentId }}" >> /tmp/result.txt
          echo "discussionId=${{ inputs.discussionId }}" >> /tmp/result.txt
          cat /tmp/result.txt

      - name: test
        run: |
          export IMGTAG=${{ steps.genoutputs.outputs.kindversion }}-${{ steps.genoutputs.outputs.ref }}
          if [ ${{ inputs.tagWithKind}}  == false  ];then 
            IMGTAG=${{ steps.genoutputs.outputs.ref }}
            echo "tagWithKind is false,tag not with kind version."
          fi
          if [[ ${{ steps.genoutputs.outputs.maketag }} == true  ]];then
            IMGREF=`git describe --tags`
            IMGTAG=${{ steps.genoutputs.outputs.kindversion }}-$IMGREF
          fi
          echo "IMGTAG:"$IMGTAG
          #TODO 测试多节点
          #TODO 收集日志,失败的时候可以查看
          kind create cluster --retain --image ghcr.io/liangyuanpeng/${{ inputs.imgrepo }}:$IMGTAG
          kubectl get po -A
          kubectl wait node --all --for condition=ready
          kubectl run test --image httpd:2
          kubectl wait --timeout=1m --for=condition=ready pods test
          kubectl get pods -A -owide

      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: result
      #     path: /tmp/result.txt

      - name: save outputs 
        id: saveoutputs
        run: |
          mv /tmp/result.txt .
          oras push ghcr.io/liangyuanpeng/lanactions/artifacts-kind:${{ github.run_id }} result.txt

          export IMGTAG=${{ steps.genoutputs.outputs.kindversion }}-${{ steps.genoutputs.outputs.ref }}
          if [ ${{ inputs.tagWithKind }}  == false  ];then 
            IMGTAG=${{ steps.genoutputs.outputs.ref }}
            echo "tagWithKind is false,tag not with kind version."
          fi
          if [[ ${{ steps.genoutputs.outputs.maketag }} == true  ]];then
            IMGREF=`git describe --tags`
            IMGTAG=${{ steps.genoutputs.outputs.kindversion }}-$IMGREF
          fi

          echo "GH_RUN_ID=${{ github.run_id }}" > result.txt
          echo "GH_REPO=$GITHUB_REPOSITORY" >> result.txt
          oras push ghcr.io/liangyuanpeng/lanactions/artifacts-kind-buildrun:$IMGTAG result.txt
