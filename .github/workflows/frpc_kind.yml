#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: frpc_kind
on:
  workflow_dispatch:
    inputs:
      port:
        description: 'port'
        required: true
      custom:
        description: "custom query param"
        required: false
      valueImage:
      #TODO 从oci artifact 容器镜像当中获取参数,主要是用于不同action,动态化参数. 而不是action param,参数多的话太复杂
      # 镜像内必须提供一个 value.json 和 .env 的文件,后续需要从这个文件来解析内容. .env 则用于提供环境变量
      # 目前主要分为以下几个阶段:
      # 1. genoutputs
      # 2. init 用于安装一些基础内容,例如 cloudflare tunnel,tailscale,kind
      # 3. kindinit 基于kind来创建一个kubernetes集群
      # 4. envinit 初始化实验环境

      # 基于value.json 的通用流程使用一个新的job来做,只提供一个step来完成自己的内容,减少复杂度,再逐渐迭代成多个操作的step,如果有需要的话
        description: "custom params from oci artifact image"
        required: false
      valueTag:
        description: "custom params from oci artifact image tag"
        required: false
      username:
        description: "username for oci artifact image tag"
        required: false
      password:
        description: "password for oci artifact image tag"
        required: false
      initimg:
        description: 'initimg'
        required: false
      initImageRegistry:
        description: 'initImageRegistry'
        required: false
      timeout:
        description: 'timeout'
        required: false
        default: 120
        type: number 
  # pull_request:

jobs:

  ghaction:
    name: ghaction
    if: ${{ inputs.valueImage }}
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    permissions:
      packages: write
    steps:
      - name: genoutputs
        id: genoutputs
        run: |
          echo genoutputs

      - uses: actions-rs/toolchain@v1
        if: steps.genoutputs.outputs.rust == 'true'
        with:
          profile: default
          toolchain: ${{ steps.genoutputs.outputs.rustversion }}
          override: true

      - uses: actions/setup-go@v2
        if: steps.genoutputs.outputs.golang == 'true'
        with:
          go-version: ${{ steps.genoutputs.outputs.goversion }}

      - name: runinit
        env:
          GH_TOKEN: ${{ secrets.GH_PACKAGE_TOKEN }}
        run: |
          oras login ghcr.io -u${{ inputs.username }} -p${{ inputs.password }}
          oras pull ghcr.io/${{ inputs.valueImage }}:${{ inputs.valueTag }}
          chmod +x init.sh
          ./init.sh

  frpc:
    name: start_frpc
    if: ${{ !inputs.valueImage }}
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    permissions:
      packages: write
    # if: ${{ github.event.workflow_run  }}
    steps:
      - name: checkoutactions
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: genoutputs
        id: genoutputs
        run: |
          oras pull -uliangyuanpeng -p${{ secrets.GH_PACKAGE_TOKEN }} ghcr.io/liangyuanpeng/lanfiles:kindinit
          chmod +x actionops.sh
          ./actionops.sh

      - name: print outputs
        run: |
          echo "goversion is" ${{ steps.genoutputs.outputs.goversion }}
          echo "ffmpeg is" ${{ steps.genourtputs.outputs.ffmpeg }}
          echo "graalvm is" ${{ steps.genoutputs.outputs.graalvm }}
          echo "rsdev is" ${{ steps.genoutputs.outputs.rsdev }}
          echo "rustversion is" ${{ steps.genoutputs.outputs.rustversion }}

      - uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.genoutputs.outputs.goversion }}

      - uses: FedericoCarboni/setup-ffmpeg@v2
        if: steps.genoutputs.outputs.ffmpeg == 'true'
        id: setup-ffmpeg
        
      - uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0

      - uses: graalvm/setup-graalvm@v1
        if: steps.genoutputs.outputs.graalvm == 'true'
        with:
          java-version: '17'
          version: '22.3.2' # Old 'version' option for the GraalVM version
          # java-version: '17.0.7'
          # distribution: 'graalvm' # See 'Options' for all available distributions

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        if: steps.genoutputs.outputs.kubectl == 'true'
        with:
          version: ${{ steps.genoutputs.outputs.kubectlversion }}

      - uses: actions-rs/toolchain@v1
        if: steps.genoutputs.outputs.rsdev == 'true'
        with:
          profile: default
          toolchain: ${{ steps.genoutputs.outputs.rustversion }}
          override: true

      - name: runinit
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_PACKAGE_TOKEN }}
          FRPC_PORT: ${{ inputs.port }}
          FRP_SERVER_PORT: ${{ secrets.FRP_SERVER_PORT }}
          FRP_SERVER_ADDR: ${{ secrets.FRP_SERVER_ADDR }}
          WORKSPACE: kind
          SYSTEM: debian
        run: |
          oras login ghcr.io -uliangyuanpeng -p$GH_TOKEN
          oras pull ghcr.io/liangyuanpeng/lanfiles:ghdev
          chmod +x init.sh
          ./init.sh

      - name: kindinit
        if: steps.genoutputs.outputs.kindcreate == 'true'
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_PACKAGE_TOKEN }}
          FRPC_PORT: ${{ inputs.port }}
          FRP_SERVER_PORT: ${{ secrets.FRP_SERVER_PORT }}
          FRP_SERVER_ADDR: ${{ secrets.FRP_SERVER_ADDR }}
          WORKSPACE: kind
          SYSTEM: debian
        run: |
          #oras pull -uliangyuanpeng -p$GH_TOKEN ghcr.io/liangyuanpeng/lanfiles:kindinit
          chmod +x kindinit.sh
          chmod +x setup.sh
          ./kindinit.sh

      #TODO && need to send slack
      - name: upload file to slack
        if: steps.genoutputs.outputs.kindcreate == 'true'
        uses: adrey/slack-file-upload-action@master
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          path: /tmp/admin.conf
          channel: lanren
          title: kubefile${{ inputs.port }}

      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        if: steps.genoutputs.outputs.freediskspace1 == 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed, if set to "true" but frees about 6 GB
          tool-cache: false
          # all of these default to true, but feel free to set to "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: false

      - name: envinit
        env:
          GH_TOKEN: ${{ secrets.GH_PACKAGE_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          FRPC_PORT: ${{ inputs.port }}
          WORKSPACE: kind
          SYSTEM: debian
        run: |
          oras pull -uliangyuanpeng -p$GH_TOKEN ghcr.io/liangyuanpeng/lanfiles:envinit
          chmod +x envinit.sh
          ./envinit.sh ${{ inputs.custom }}

      - name: Free Disk Space (Ubuntu)
        if: steps.genoutputs.outputs.freediskspace2 == 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed, if set to "true" but frees about 6 GB
          tool-cache: false
          # all of these default to true, but feel free to set to "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: false

      - name: begin sleep 
        run: |
           sleep 3h

  active:
    name: print
    runs-on: ubuntu-latest
    steps:
      - name: checkoutactions
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - run: |
          env
