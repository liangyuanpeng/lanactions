#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: k8s_ci
on:
  push:
    branches: [ k8s_ci ]
  workflow_call:
    inputs:
      ref:
        description: 'source ref of kubernetes '
        required: false
        default: "master"
        type: string
      repo:
        description: 'repo of kubernetes'
        required: false
        default: "kubernetes/kubernetes"
        type: string
      kindVersion:
        description: 'kindVersion'
        required: false
        default: "v0.22.0"
        type: string
      hydrophone:
        description: 'hydrophone'
        required: false
        default: true
        type: boolean
      testname:
        description: 'testname'
        required: false
        default: "none"
        type: string
      commitID:
        description: 'commitID'
        required: false
        default: "none"
        type: string
      k8sCPCount:
        description: 'k8sCPCount'
        required: false
        default: 1
        type: number
      #TODO 使用Kind的master 构建kind bin
      #TODO 添加一个job来输出 commit id,后续任务都基于这个commit id 的代码来跑CI
      #TODO 添加github action summary, 显示当前workflow执行的 commit id 以及任务成功失败

jobs:

#TODO 构建k8s容器镜像
#TODO 构建完k8s容器镜像后 直接安装containerd, kubeadm 部署k8s
#TODO 添加etcd重启,然后再跑一遍测试
# TODO etcd 数据持久化,添加多一个参数? 是否使用持久化的etcd进行测试,是的话 每次测试完成后都将数据存起来,下一次加载继续使用.
#TODO kubeadm 升级测试?

  getcommitid:
    name: getcommitid
    runs-on: ubuntu-22.04
    env:
      INPUT_COMMID_ID: ${{ inputs.commitID }}
    outputs:
      commitID: ${{ steps.gencommitid.outputs.commitID }}
    steps:
      # - name: checkoutactions
      #   if: ${{ inputs.commitID == 'none' }}
      #   uses: actions/checkout@v4
      #   with:
      #     repository: kubernetes/kubernetes
      #     # repository: ${{ inputs.repo }}
      #     fetch-depth: 0
      #     ref: ${{ inputs.ref }}
      - name: gen commitID
        id: gencommitid
        run: |
          if [ $INPUT_COMMID_ID != "none" ];then
            echo "commitID=$INPUT_COMMID_ID" >> "$GITHUB_OUTPUT"
          else
             git clone https://github.com/kubernetes/kubernetes -b ${{ inputs.ref }}
             cd kubernetes
             LATEST_COMMIT=`git rev-parse HEAD`
             echo "commitID=$LATEST_COMMIT" >> "$GITHUB_OUTPUT"
          fi

  build-kind:
    name: build-kind
    needs: getcommitid
    permissions:
      packages: write
    runs-on: ubuntu-22.04
    env:
      COMMIT_ID: ${{ needs.getcommitid.outputs.commitID }}
      KIND_VERSION: ${{ inputs.kindVersion }}
    outputs:
      imgtag: ${{ steps.checkimgs.outputs.imgtag }}
    steps:
      - name: make default value
        id: genoutputs
        env:
          REF: ${{ github.event.inputs.ref }}
          REPO: ${{ github.event.inputs.repo }}
        run: |
          if [ "$REF" = "" ];then
              echo "ref=master" >> "$GITHUB_OUTPUT"
          else
              echo "ref=$REF" >> "$GITHUB_OUTPUT"
          fi

          if [ "$REPO" = "" ];then
              echo "repo=kubernetes/kubernetes" >> "$GITHUB_OUTPUT"
          else
              echo "repo=$REPO" >> "$GITHUB_OUTPUT"
          fi

      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          # repository: ${{ inputs.repo }}
          fetch-depth: 0
          ref: ${{ inputs.ref }}

      - name: check out to commitid
        run: |
          echo "COMMIT_ID:"$COMMIT_ID
          pwd
          git reset --hard $COMMIT_ID
          git log --pretty=format:"%s" $COMMIT_ID -1

      - name: checkimgs
        id: checkimgs
        run: |
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          IMGTAG=`git describe --tags`
          echo "imgtag=${IMGTAG}" >> "$GITHUB_OUTPUT"
          echo "check images for ghcr.io/liangyuanpeng/kindest/testnode:"$KIND_VERSION-$IMGTAG

          IMAGE_EXIST=`oras manifest fetch ghcr.io/liangyuanpeng/kindest/testnode:$KIND_VERSION-$IMGTAG  | grep schemaVersion | wc -l `
          if [ $IMAGE_EXIST -eq 1 ]; then
            echo "exist testnode"
            echo "exist=true" >> "$GITHUB_OUTPUT"
          else 
            echo "exist=false" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/setup-go@v5
        if: steps.checkimgs.outputs.exist != 'true'
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        if: steps.checkimgs.outputs.exist != 'true'
        with:
          version: 1.0.0
      - name: clean
        if: steps.checkimgs.outputs.exist != 'true'
        run: |
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          nohup docker rmi `docker images -aq` &
          rm -rf /opt/hostedtoolcache/CodeQL
          rm -rf /opt/hostedtoolcache/node
          rm -rf /opt/hostedtoolcache/Python

      - name: download kind
        if: steps.checkimgs.outputs.exist != 'true'
        run: |
          wget -q https://github.com/kubernetes-sigs/kind/releases/download/$KIND_VERSION/kind-linux-amd64
          chmod +x kind-linux-amd64 &&  mv kind-linux-amd64 /usr/local/bin/kind

      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        if: steps.checkimgs.outputs.exist != 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed, if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: false

      - name: build kind node
        id: build-kind-node
        if: steps.checkimgs.outputs.exist != 'true'
        run: |
          IMGTAG=`git describe --tags`
          mkdir -p tmp
          cd tmp
          kind build node-image --image ghcr.io/liangyuanpeng/kindest/testnode:$KIND_VERSION-$IMGTAG  --kube-root $PWD/../
          cd ..
          rm -rf tmp
          docker push ghcr.io/liangyuanpeng/kindest/testnode:$KIND_VERSION-$IMGTAG

  build-k8sbins:
    name: build-k8sbins
    needs: getcommitid
    env:
      COMMIT_ID: ${{ needs.getcommitid.outputs.commitID }}
    permissions:
      packages: write
    runs-on: ubuntu-22.04
    steps:

      - name: make default value
        id: genoutputs
        env:
          REF: ${{ github.event.inputs.ref }}
          REPO: ${{ github.event.inputs.repo }}
        run: |
          if [ "$REF" = "" ];then
              echo "ref=master" >> "$GITHUB_OUTPUT"
          else
              echo "ref=$REF" >> "$GITHUB_OUTPUT"
          fi

          if [ "$REPO" = "" ];then
              echo "repo=kubernetes/kubernetes" >> "$GITHUB_OUTPUT"
          else
              echo "repo=$REPO" >> "$GITHUB_OUTPUT"
          fi

      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          # repository: ${{ inputs.repo }}
          fetch-depth: 0
          ref: ${{ inputs.ref }}

      - name: check out to commitid
        run: |
          echo "COMMIT_ID:"$COMMIT_ID
          pwd
          git reset --hard $COMMIT_ID

      - name: checkimgs
        id: checkimgs
        run: |
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          IMGTAG=`git describe --tags`
          echo "check images for ghcr.io/liangyuanpeng/kubebins:"$IMGTAG

          IMAGE_EXIST=`oras manifest fetch ghcr.io/liangyuanpeng/kubebins:$IMGTAG | grep mediaType | wc -l `
          if [ $IMAGE_EXIST -eq 1 ]; then
            echo "exist testnode"
            echo "exist=true" >> "$GITHUB_OUTPUT"
          else 
            echo "exist=false" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/setup-go@v5
        if: steps.checkimgs.outputs.exist != 'true'
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        if: steps.checkimgs.outputs.exist != 'true'
        with:
          version: 1.0.0
      - name: clean
        if: steps.checkimgs.outputs.exist != 'true'
        run: |
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          nohup docker rmi `docker images -aq` &
          rm -rf /opt/hostedtoolcache/CodeQL
          rm -rf /opt/hostedtoolcache/node
          rm -rf /opt/hostedtoolcache/Python

      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        if: steps.checkimgs.outputs.exist != 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: false

      - name: build
        if: steps.checkimgs.outputs.exist != 'true'
        run: |
          IMGTAG=`git describe --tags`
          
          make
          cd _output/bin
          bins=`ls .`
          oras push ghcr.io/liangyuanpeng/kubebins:$IMGTAG $bins

  e2e:
    name: e2e
    needs:
    - build-kind
    - build-k8sbins
    permissions:
      packages: write
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        #TODO k8s 节点数量? 1 3 5?
        etcd: 
        - build-in 
        # - etcd-master
        # - etcd-release3.5
        # - xline
        - etcd-big # 持久化的etcd
        storageMediaType: 
        - protobuf
        - json
        - yaml
        # - TODO CBOR
    runs-on: ubuntu-22.04
    env:
      K8S_CP_COUNT: ${{ inputs.k8sCPCount }}
      KIND_VERSION: ${{ inputs.kindVersion }}
      IMGTAG: ${{ needs.build-kind.outputs.imgtag }}
      # TEST_WHAT: ${{ matrix.tests }}
      TEST_WHAT: ${{ inputs.testname }}
      WHICH_ETCD: ${{ matrix.etcd }}
      STORAGE_MEDIA_TYPE: ${{ matrix.storageMediaType }}
      # JON_NAME: e2e-${{ inputs.kindVersion }}_${{ matrix.tests }}_${{ matrix.etcd }}_${{ matrix.storageMediaType }}
      JON_NAME: e2e-${{ inputs.kindVersion }}_${{ inputs.testname }}_${{ matrix.etcd }}_${{ matrix.storageMediaType }}
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0
      - name: clean
        run: |
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          nohup docker rmi `docker images -aq` &
          rm -rf /opt/hostedtoolcache/CodeQL
          rm -rf /opt/hostedtoolcache/node
          rm -rf /opt/hostedtoolcache/Python
      - name: make default value
        id: genoutputs
        env:
          REF: ${{ github.event.inputs.ref }}
          REPO: ${{ github.event.inputs.repo }}
        run: |
          if [ "$REF" = "" ];then
              echo "ref=master" >> "$GITHUB_OUTPUT"
          else
              echo "ref=$REF" >> "$GITHUB_OUTPUT"
          fi

          if [ "$REPO" = "" ];then
              echo "repo=kubernetes/kubernetes" >> "$GITHUB_OUTPUT"
          else
              echo "repo=$REPO" >> "$GITHUB_OUTPUT"
          fi

      - name: get kind
        run: |
          oras pull ghcr.io/liangyuanpeng/files:k8scish
          chmod +x k8sci.sh 
          STEP_WAHT=getbuild ./k8sci.sh

      - name: create kubernetes cluster
        run: |
          STEP_WHAT=deployk8s ./k8sci.sh

      - name: waiting for cluster ready 
        run: |
          kubectl get nodes -o wide
          kubectl get pods -A
          kubectl wait --timeout=1m --for=condition=ready pods --namespace=kube-system -l k8s-app=kube-dns
          # TODO 运行一些简单的部署,例如deployment, 等待完成 然后删除 等待完成删除

      - name: download bins
        run: |
          mkdir -p _output/bin
          cd _output/bin
          oras pull ghcr.io/liangyuanpeng/kubebins:$IMGTAG
          chmod +x ./*
          cd ../..
          mv _output/bin/* /usr/local/bin/

      - name: run tests_${{ inputs.testname }}
        run: |
          STEP_WHAT=runtests ./k8sci.sh

      # - name: run conformance test 
      #   if: matrix.tests == 'conformance'
      #   run: |
      #     #TODO 进行更多测试,例如 alpha,beta 功能测试
      #     STEP_WHAT=runtests TEST_WHAT=conformance ./k8sci.sh

      # - name: run statefulset test
      #   if: matrix.tests == 'statefulset'
      #   run: |
      #     # ginkgo --nodes=25                \
      #     # --focus="\[Feature:StatefulSet\]"     \
      #     # /usr/local/bin/e2e.test                       \
      #     # --                                            \
      #     # --kubeconfig=${PWD}/_artifacts/config     \
      #     # --provider=local                              \
      #     # --dump-logs-on-failure=true                  \
      #     # --report-dir=${PWD}/_artifacts/testreport            \
      #     # --disable-log-dump=false
          
      #     STEP_WHAT=runtests TEST_WHAT=statefulset ./k8sci.sh

      - name: print result 
        if: always()
        run: |
          ls
          ls _artifacts/testreport
          # ghcr.io/liangyuanpeng/kubebins:v1.31.0-alpha.0-24-g9791f0d1f39
          # find / -name "*junit"

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: kind_testreport_e2e-${{ inputs.kindVersion }}_CPCOUNT${{ inputs.k8sCPCount }}_${{ inputs.testname }}_${{ matrix.etcd }}_${{ matrix.storageMediaType }}
          path: _artifacts/testreport

      - name: export logs
        if: always()
        run: |
          kubectl get pod -A
          kind export logs /tmp/kind

      - name: upload kind logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: kind_test_e2e-${{ inputs.kindVersion }}_CPCOUNT${{ inputs.k8sCPCount }}_${{ inputs.testname }}_${{ matrix.etcd }}_${{ matrix.storageMediaType }}
          path: /tmp/kind/

  e2e-with-hydrophone:
    name: e2e-with-hydrophone
    timeout-minutes: 120
    if: ${{ inputs.hydrophone }}
    needs:
    - build-kind
    - build-k8sbins
    permissions:
      packages: write
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        tests:
        # - hydrophone --conformance-image registry.k8s.io/conformance:v1.29.2 --parallel 25  --focus=\[StatefulSetBasic\]
        # - hydrophone --conformance-image ghcr.io/liangyuanpeng/conformance-amd64:v1.31.0-alpha.0-26-g7606cf7b3d7 --parallel 25  --focus=\[Feature:StatefulSet\]
        - hydrophone --conformance-image ghcr.io/liangyuanpeng/conformance-amd64:v1.31.0-alpha.0-26-g7606cf7b3d7 --conformance  --verbosity 2 --parallel 25 --skip="Feature|Federation|machinery|PerformanceDNS|DualStack|Disruptive|Serial|Slow|KubeProxy|LoadBalancer|GCE|Netpol|NetworkPolicy|NodeConformance"
    env:
      KIND_VERSION: ${{ inputs.kindVersion }}
      IMGTAG: ${{ needs.build-kind.outputs.imgtag }}
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0
      - name: clean
        run: |
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          nohup docker rmi `docker images -aq` &
          rm -rf /opt/hostedtoolcache/CodeQL
          rm -rf /opt/hostedtoolcache/node
          rm -rf /opt/hostedtoolcache/Python

      - name: get kind
        run: |
          oras pull ghcr.io/liangyuanpeng/files:k8scish
          chmod +x k8sci.sh 
          STEP_WAHT=getbuild ./k8sci.sh

      - name: create kubernetes cluster
        run: |
          STEP_WHAT=deployk8s ./k8sci.sh

      - name: waiting for cluster ready 
        run: |
          kubectl get nodes -o wide
          kubectl get pods -A
          kubectl wait --timeout=1m --for=condition=ready pods --namespace=kube-system -l k8s-app=kube-dns

      - name: build hydrophone
        run: |
          pwd
          git clone https://github.com/kubernetes-sigs/hydrophone.git
          cd hydrophone
          go mod tidy
          make
          mv bin/hydrophone /usr/local/bin/hydrophone
          hydrophone -h

      - name: run test 
        run: |
          # watch kubectl get pod -A
          # hydrophone --conformance --parallel 25 --focus sig-apps --skip="Feature|Federation|machinery|PerformanceDNS|DualStack|Disruptive|Serial|Slow|KubeProxy|LoadBalancer|GCE|Netpol|NetworkPolicy|NodeConformance"
          export EXTRA_ARGS="--parallel=25"
          # hydrophone --conformance-image registry.k8s.io/conformance:v1.29.2 --conformance  --verbosity 2 --parallel 25 --skip="Feature|Federation|machinery|PerformanceDNS|DualStack|Disruptive|Serial|Slow|KubeProxy|LoadBalancer|GCE|Netpol|NetworkPolicy|NodeConformance"
          # hydrophone --conformance --parallel 25
          # hydrophone --parallel 25 --focus sig-apps
          # see report 
          # hydrophone --conformance-image registry.k8s.io/conformance:v1.29.2 --parallel 25  --focus=\[StatefulSetBasic\]
          ${{ matrix.tests }}
          ls
          mkdir -p _artifacts/testreport
          mv e2e.log _artifacts/testreport/
          mv junit_01.xml _artifacts/testreport/

      - name: export logs
        if: always()
        run: |
          kind export logs /tmp/kind
          kubectl get pod -A

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: hydrophone_testreport
          path: _artifacts/testreport

      - name: upload kind logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: kind_test_hydrophone_${{ needs.build-kind.outputs.imgtag }}_CPCOUNT${{ inputs.k8sCPCount }}
          path: /tmp/kind/
