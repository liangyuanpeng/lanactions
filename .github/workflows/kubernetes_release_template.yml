#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: kubernetes_release_template
on:
  workflow_call:
    inputs:
      ref:
        description: 'source ref of kubernetes '
        required: false
        default: "master"
        type: string
      repo:
        description: 'kubernetes/kubernetes'
        required: false
        default: "kubernetes/kubernetes"
        type: string
      imgrepo:
        description: ''
        required: false
        default: ""
        type: string
      checkCommit:
        description: 'checkCommit'
        required: false
        default: "false"
        type: string
      

permissions:
  packages: write

env:
  GOFLAGS: "-p=2"
  REF: ${{ inputs.ref }}
  GH_TOKEN: ${{ github.token }}

jobs:

#TODO cross 多架构镜像构建.
  release:
    name: release-${{ inputs.ref }}
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    steps:

      - uses: oras-project/setup-oras@main
        with:
          version: 1.2.0

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: $GITHUB_REPOSITORY_OWNER
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: checkimgs
        id: checkimgs
        run: |
          # kubernetes/kubernetes

          echo "IMAGE_PREFIX:${IMAGE_PREFIX}"
          echo "imgrepo:"${{ inputs.imgrepo}}

          export COMMITID=`gh api /repos/${{ inputs.repo }}/commits?sha=$REF | jq -r '.[0].sha'`
          echo "commitiD=$COMMITID" >> "$GITHUB_OUTPUT"

          export IMAGE_PREFIX=ghcr.io/$GITHUB_REPOSITORY_OWNER
          if [ "${{ inputs.imgrepo}}" != "" ];then
            IMAGE_PREFIX=ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo}}
          fi

          # IMGTAG=`git describe --tags`
          echo "check images for "$COMMITID
          IMAGE_EXIST=`oras manifest fetch ${IMAGE_PREFIX}/conformance-amd64:$COMMITID  | grep schemaVersion | wc -l `
          if [ $IMAGE_EXIST -eq 1 ]; then
            echo "exist kubeimgs"
            echo "exist=true" >> "$GITHUB_OUTPUT"
          else 

            if [ ${{ inputs.checkCommit }} = "true" ];then 
              echo "exist=false" >> "$GITHUB_OUTPUT"
            else 
              echo "exist=true" >> "$GITHUB_OUTPUT"
            fi
            
          fi

      - name: checkoutactions
        uses: actions/setup-go@v5
        if: steps.checkimgs.outputs.exist != 'true'
        with:
          repository: ${{ inputs.repo }}
          fetch-depth: 0
#          ref: v1.27.4-patch #ed18ab54ba9925c835a69dd155b1217af9ab630a #dev_1.28
#          ref: dev_1.28
          # ref: master
          ref: ${{ inputs.ref }}

      - name: Free Disk Space (Ubuntu)
        if: steps.checkimgs.outputs.exist != 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - uses: actions/setup-go@v5
        if: steps.checkimgs.outputs.exist != 'true'
        with:
          go-version-file: go.mod

      - name: checkout to commitiD
        if: steps.checkimgs.outputs.exist != 'true'
        run: |
          export COMMITID=${{ steps.checkimgs.outputs.commitiD }}
          echo "COMMITID:$COMMITID"
          git reset --hard $COMMITID

      - name: make
        if: steps.checkimgs.outputs.exist != 'true'
        run: |

          sudo apt install -y tree

          # export KUBE_DOCKER_REGISTRY=${IMAGE_PREFIX}
          export COMMITID=${{ steps.checkimgs.outputs.commitiD }}

          export IMGTAG=`git describe`
          echo "IMGTAG:"$IMGTAG
          echo "COMMITID:$COMMITID"
          git tag `git describe`
          echo "begin make"
          
          # WHAT=kube-apiserver KUBE_DOCKER_REGISTRY=ghcr.io/liangyuanpeng KUBE_BUILD_CONFORMANCE=y KUBE_BUILD_PLATFORMS="linux/amd64 linux/arm64" make quick-release-images
          # KUBE_DOCKER_REGISTRY=ghcr.io/liangyuanpeng KUBE_BUILD_CONFORMANCE=y KUBE_BUILD_PLATFORMS="linux/amd64 linux/arm64" make quick-release-images
          #make quick-release-images
          #make release-images KUBE_BUILD_CONFORMANCE=y
          export GOFLAGS="-p=2"
          KUBE_BUILD_CONFORMANCE=y KUBE_BUILD_PLATFORMS="linux/amd64" make quick-release-images
          mkdir -p _output/release-images

          #make quick-release-images KUBE_BUILD_CONFORMANCE=y

          # 现在默认构建的镜像版本和git describe 不太一样
          # 默认的是修改过，符合版本定义的  v1.31.0-alpha.0.26_7606cf7b3d7828
          # git describe 则是             v1.31.0-alpha.0-26-g7606cf7b3d7
          # cat .dockerized-kube-version-defs | grep KUBE_GIT_VERSION |  cut -d'=' -f2 | sed "s/'//g"

          docker images
          ls _output
          echo "======================="
          ls _output/release-images
          echo "======================="
          ls _output/images
          echo "======================="
          tree _output
          echo "======================="
          rm -rf _output/dockerized
          rm -rf _output/release-stage

          docker load -i _output/release-images/amd64/kube-apiserver.tar
          rm -f _output/release-images/amd64/kube-apiserver.tar
          docker load -i _output/release-images/amd64/kube-controller-manager.tar
          rm -f _output/release-images/amd64/kube-controller-manager.tar
          docker load -i _output/release-images/amd64/kube-proxy.tar
          rm -f _output/release-images/amd64/kube-proxy.tar
          docker load -i _output/release-images/amd64/kube-scheduler.tar
          rm -f _output/release-images/amd64/kube-scheduler.tar
          docker load -i _output/release-images/amd64/conformance-amd64.tar
          rm -f _output/release-images/amd64/conformance-amd64.tar
          
          docker images

          export IMAGE_PREFIX=ghcr.io/$GITHUB_REPOSITORY_OWNER
          if [ "${{ inputs.imgrepo}}" != "" ];then
            IMAGE_PREFIX=ghcr.io/$GITHUB_REPOSITORY_OWNER/${{ inputs.imgrepo}}
          fi

          #TODO skopeo?
          docker tag registry.k8s.io/kube-apiserver-amd64:$IMGTAG ${IMAGE_PREFIX}/kube-apiserver-amd64:$IMGTAG
          docker tag registry.k8s.io/kube-controller-manager-amd64:$IMGTAG ${IMAGE_PREFIX}/kube-controller-manager-amd64:$IMGTAG
          docker tag registry.k8s.io/kube-proxy-amd64:$IMGTAG ${IMAGE_PREFIX}/kube-proxy-amd64:$IMGTAG
          docker tag registry.k8s.io/kube-scheduler-amd64:$IMGTAG ${IMAGE_PREFIX}/kube-scheduler-amd64:$IMGTAG
          docker tag registry.k8s.io/conformance-amd64:$IMGTAG ${IMAGE_PREFIX}/conformance-amd64:$IMGTAG
          
          docker push ${IMAGE_PREFIX}/kube-apiserver-amd64:$IMGTAG
          docker push ${IMAGE_PREFIX}/kube-controller-manager-amd64:$IMGTAG
          docker push ${IMAGE_PREFIX}/kube-proxy-amd64:$IMGTAG
          docker push ${IMAGE_PREFIX}/kube-scheduler-amd64:$IMGTAG
          docker push ${IMAGE_PREFIX}/conformance-amd64:$IMGTAG

          skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-apiserver-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-apiserver-amd64:${{ inputs.ref }}
          skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-apiserver-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-apiserver:${{ inputs.ref }}
          
          if [ ${{ inputs.checkCommit }} = "true" ];then 
            skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-apiserver-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-apiserver-amd64:$COMMITID
            skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-apiserver-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-apiserver:$COMMITID
          fi

          skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-controller-manager-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-controller-manager-amd64:${{ inputs.ref }}
          skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-controller-manager-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-controller-manager:${{ inputs.ref }}
          if [ ${{ inputs.checkCommit }} = "true" ];then 
            skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-controller-manager-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-controller-manager-amd64:$COMMITID
            skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-controller-manager-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-controller-manager:$COMMITID
          fi

          skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-scheduler-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-scheduler-amd64:${{ inputs.ref }}
          skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-scheduler-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-scheduler:${{ inputs.ref }}
          if [ ${{ inputs.checkCommit }} = "true" ];then 
            skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-scheduler-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-scheduler-amd64:$COMMITID
            skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-scheduler-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-scheduler:$COMMITID
          fi

          skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-proxy-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-proxy-amd64:${{ inputs.ref }}
          skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-proxy-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-proxy:${{ inputs.ref }}
          if [ ${{ inputs.checkCommit }} = "true" ];then 
            skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-proxy-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-proxy-amd64:$COMMITID
            skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/kube-proxy-amd64:$IMGTAG docker://${IMAGE_PREFIX}/kube-proxy:$COMMITID
          fi

          skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/conformance-amd64:$IMGTAG docker://${IMAGE_PREFIX}/conformance-amd64:${{ inputs.ref }}
          skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/conformance-amd64:$IMGTAG docker://${IMAGE_PREFIX}/conformance:${{ inputs.ref }}
          if [ ${{ inputs.checkCommit }} = "true" ];then 
            skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/conformance-amd64:$IMGTAG docker://${IMAGE_PREFIX}/conformance-amd64:$COMMITID
            skopeo copy --dest-authfile $HOME/.docker/config.json  docker://${IMAGE_PREFIX}/conformance-amd64:$IMGTAG docker://${IMAGE_PREFIX}/conformance:$COMMITID
          fi

          docker images
          df -h
          #TODO arm64
