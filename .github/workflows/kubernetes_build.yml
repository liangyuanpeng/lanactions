#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: release_kubernetes_latest
on:
  workflow_call:
    inputs:
      ref:
        description: 'source ref of kubernetes '
        required: false
        default: "master"
        type: string
      repo:
        description: 'kubernetes/kubernetes'
        required: false
        default: "kubernetes/kubernetes"
        type: string

jobs:

  release:
    name: release
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    steps:


      - name: checkoutactions
        uses: actions/checkout@v4
        with:
#          repository: liangyuanpeng/kubernetes
          repository: kubernetes/kubernetes
          # repository: ${{ inputs.repo }}
          fetch-depth: 0
#          ref: v1.27.4-patch #ed18ab54ba9925c835a69dd155b1217af9ab630a #dev_1.28
#          ref: dev_1.28
          # ref: master
          ref: ${{ inputs.ref }}

      - name: git tag
        run: |
          echo "do git tag"
          #git tag v1.27.4-patch
          nohup docker rmi `docker images -aq` &

      - name: checkimgs
        id: checkimgs
        run: |
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          IMGTAG=`git describe --tags`
          echo "check images for "$IMGTAG
          IMAGE_EXIST=`oras manifest fetch ghcr.io/liangyuanpeng/conformance-amd64:$IMGTAG  | grep schemaVersion | wc -l `
          if [ $IMAGE_EXIST -eq 1 ]; then
            echo "exist kubeimgs"
            echo "exist=true" >> "$GITHUB_OUTPUT"
          else 
            echo "exist=false" >> "$GITHUB_OUTPUT"
          fi

      - uses: oras-project/setup-oras@v1
        if: steps.checkimgs.outputs.exist != 'true'
        with:
          version: 1.0.0

      - uses: actions/setup-go@v5
        if: steps.checkimgs.outputs.exist != 'true'
        with:
          go-version: '1.22'

      - name: Free Disk Space (Ubuntu)
        if: steps.checkimgs.outputs.exist != 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: make
        if: steps.checkimgs.outputs.exist != 'true'
        run: |

          #export KUBE_DOCKER_REGISTRY=ghcr.io
          #export IMGTAG="v1.27.4-patch"
          export IMGTAG=`git describe`
          echo "IMGTAG:"$IMGTAG
          git tag `git describe`
          echo "begin make"
          
          #make quick-release-images
          #make release-images KUBE_BUILD_CONFORMANCE=y
          make quick-release-images KUBE_BUILD_CONFORMANCE=y

          # 现在默认构建的镜像版本和git describe 不太一样
          # 默认的是修改过，符合版本定义的  v1.31.0-alpha.0.26_7606cf7b3d7828
          # git describe 则是             v1.31.0-alpha.0-26-g7606cf7b3d7
          # cat .dockerized-kube-version-defs | grep KUBE_GIT_VERSION |  cut -d'=' -f2 | sed "s/'//g"

          docker images
          ls _output
          echo "======================="
          ls _output/release-images
          echo "======================="
          ls _output/images
          echo "======================="
          tree _output
          echo "======================="
          rm -rf _output/dockerized
          rm -rf _output/release-stage

          docker load -i _output/release-images/amd64/kube-apiserver.tar
          rm -f _output/release-images/amd64/kube-apiserver.tar
          docker load -i _output/release-images/amd64/kube-controller-manager.tar
          rm -f _output/release-images/amd64/kube-controller-manager.tar
          docker load -i _output/release-images/amd64/kube-proxy.tar
          rm -f _output/release-images/amd64/kube-proxy.tar
          docker load -i _output/release-images/amd64/kube-scheduler.tar
          rm -f _output/release-images/amd64/kube-scheduler.tar
          docker load -i _output/release-images/amd64/conformance-amd64.tar
          rm -f _output/release-images/amd64/conformance-amd64.tar
          
          docker images
          docker tag registry.k8s.io/kube-apiserver-amd64:$IMGTAG ghcr.io/liangyuanpeng/kube-apiserver-amd64:$IMGTAG
          docker tag registry.k8s.io/kube-controller-manager-amd64:$IMGTAG ghcr.io/liangyuanpeng/kube-controller-manager-amd64:$IMGTAG
          docker tag registry.k8s.io/kube-proxy-amd64:$IMGTAG ghcr.io/liangyuanpeng/kube-proxy-amd64:$IMGTAG
          docker tag registry.k8s.io/kube-scheduler-amd64:$IMGTAG ghcr.io/liangyuanpeng/kube-scheduler-amd64:$IMGTAG
          docker tag registry.k8s.io/conformance-amd64:$IMGTAG ghcr.io/liangyuanpeng/conformance-amd64:$IMGTAG
          
          docker push ghcr.io/liangyuanpeng/kube-apiserver-amd64:$IMGTAG
          docker push ghcr.io/liangyuanpeng/kube-controller-manager-amd64:$IMGTAG
          docker push ghcr.io/liangyuanpeng/kube-proxy-amd64:$IMGTAG
          docker push ghcr.io/liangyuanpeng/kube-scheduler-amd64:$IMGTAG
          docker push ghcr.io/liangyuanpeng/conformance-amd64:$IMGTAG

          docker images
