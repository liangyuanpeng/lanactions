#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: k8s_ci_call
on:
  push:
    branches: [ k8s_ci_call ]
  schedule:
    - cron: '0 3 * * 0,1,2,3,4,5,6'
  workflow_dispatch:
    inputs:
      ref:
        description: 'source ref of kubernetes '
        required: false
        default: "master"
      repo:
        description: 'repo of kubernetes'
        required: false
        default: "kubernetes/kubernetes"
      kindVersion:
        description: 'kindVersion'
        required: false
        default: "v0.22.0"
        type: string
      hydrophone:
        description: 'hydrophone'
        required: false
        default: true
        type: boolean
      commitID:
        description: 'commitID'
        required: false
        default: "none"
        type: string
      #TODO 使用Kind的master 构建kind bin
permissions:
  packages: write

jobs:
# #/k8scicall
# TODO summary
# TODO 构建完 k8s 容器镜像后 直接安装 containerd, kubeadm 部署 k8s
# TODO 将镜像 push 到阿里云容器镜像仓库

  getcommitid:
    name: getcommitid
    runs-on: ubuntu-22.04
    env:
      INPUT_COMMID_ID: ${{ inputs.commitID }}
    outputs:
      commitID: ${{ steps.gencommitid.outputs.commitID }}
    steps:
      - name: gen commitID
        id: gencommitid
        run: |
          if [ $INPUT_COMMID_ID != "none" ];then
            echo "commitID=$INPUT_COMMID_ID" >> "$GITHUB_OUTPUT"
          else
             git clone https://github.com/kubernetes/kubernetes -b ${{ inputs.ref }}
             cd kubernetes
             LATEST_COMMIT=`git rev-parse HEAD`
             echo "commitID=$LATEST_COMMIT" >> "$GITHUB_OUTPUT"
             COMMIT_MESSAGE=`git log --pretty=format:"%s" $COMMIT_ID -1`
             echo "commitMsg=$COMMIT_MESSAGE" >> "$GITHUB_OUTPUT"
          fi

      - name: Adding markdown
        run: |
          echo "### 🚀"
          echo '### branch: ${{ inputs.ref }}' >> $GITHUB_STEP_SUMMARY
          echo '### commitID:${{ steps.gencommitid.outputs.commitID }}' >> $GITHUB_STEP_SUMMARY
          echo "### message: ${{ steps.gencommitid.outputs.commitMsg }}" >> $GITHUB_STEP_SUMMARY

  kind-e2e:
    name: kind-e2e
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        parallel:
        - true
        # - false
    env:
      FOCUS: "."
      PARALLEL: ${{ matrix.parallel }}
      # PARALLEL: true 
      SKIP: \[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|NFS|nfs|inline.execution.and.attach|should.be.rejected.when.no.endpoints.exist
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - name: run
        run: |
          curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && e2e-k8s.sh
      - name: check artifacts
        if: always()
        run: |
          ls _artifacts

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: kind_e2e_parallel_${{ matrix.parallel }}
          path: _artifacts

#TODO pull-kubernetes-node-e2e-containerd

  pull-kubernetes-e2e-kind-cloud-provider-loadbalancer:
    name: pull-kubernetes-e2e-kind-cloud-provider-loadbalancer
    runs-on: ubuntu-22.04
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0
      # - name: checkoutactions
      #   uses: actions/checkout@v4
      #   with:
      #     repository: kubernetes/kubernetes
      #     fetch-depth: 0
      #     ref: ${{ inputs.ref }}
      # - name: checkoutactions
      #   uses: actions/checkout@v4
      #   with:
      #     repository: kubernetes-sigs/cloud-provider-kind
      #     fetch-depth: 0
      #     ref: main
      - name: run
        run: |
          mkdir gopath
          cd gopath
          export GOPATH=$PWD
          cd ..
          mkdir -p gopath/src/k8s.io/
          OPWD=$PWD
          cd gopath/src/k8s.io/
          git clone https://github.com/kubernetes/kubernetes -b ${{ inputs.ref }}
          cd $OPWD
          mkdir -p gopath/src/sigs.k8s.io/
          cd $GOPATH/src/sigs.k8s.io/
          git clone https://github.com/kubernetes-sigs/cloud-provider-kind
          cd cloud-provider-kind
          curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && $GOPATH/src/sigs.k8s.io/cloud-provider-kind/hack/ci/e2e.sh

  pull-kubernetes-integration:
    name: pull-kubernetes-integration
    runs-on: ubuntu-22.04
    env:
      GA_ONLY: true
      PARALLEL: true
      KUBE_INTEGRATION_TEST_MAX_CONCURRENCY: "8"
      KUBE_TIMEOUT: "-timeout=1h30m"
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      # - name: checkoutactions
      #   uses: actions/checkout@v4
      #   with:
      #     repository: kubernetes/kubernetes
      #     fetch-depth: 0
      #     ref: ${{ inputs.ref }}
      - name: run
        run: |
          mkdir -p gopath 
          cd gopath
          export GOPATH=$PWD
          cd ..
          mkdir -p gopath/src/k8s.io/
          OPWD=$PWD
          cd gopath/src/k8s.io/
          git clone https://github.com/kubernetes/kubernetes -b ${{ inputs.ref }}
          cd kubernetes
          export WORKSPACE=$PWD
          hack/jenkins/test-dockerized.sh

  conformance-kind-ga-only-parallel:
    name: conformance-kind-ga-only-parallel
    runs-on: ubuntu-22.04
    env:
      GA_ONLY: true
      PARALLEL: true
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - name: run
        run: |
          curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && e2e-k8s.sh
      - name: check artifacts
        if: always()
        run: |
          ls _artifacts

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: conformance_kind_ga_only_parallel
          path: _artifacts

  kind-e2e-alpha-features-sig-storage:
    name: kind-e2e-alpha-features-sig-storage
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        parallel:
        - true
        - false
        focus:
        - \[sig-storage\]
        # - \[LocalVolumeType: blockfs\]
        - blockfs
    env:
      FEATURE_GATES: '{"AllAlpha":true,"EventedPLEG":false}'
      RUNTIME_CONFIG: '{"api/alpha":"true", "api/ga":"true"}'
      # FOCUS: \[sig-storage\]
      FOCUS: ${{ matrix.focus }}
      SKIP: \[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|In-tree.Volumes.\[Driver:.nfs\]|PersistentVolumes.NFS|Network.should.set.TCP.CLOSE_WAIT.timeout|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|should.provide.basic.identity
      # PARALLEL: true
      PARALLEL: ${{ matrix.parallel }}
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - name: run
        run: |
          curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && e2e-k8s.sh
      - name: check artifacts
        if: always()
        run: |
          ls _artifacts

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: kind_e2e_alpha_features_sig_storage_parallel_${{ matrix.parallel }}
          path: _artifacts


  kind-e2e-alpha-features:
    name: kind-e2e-alpha-features
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        parallel:
        - true
        - false
    env:
      FEATURE_GATES: '{"AllAlpha":true,"EventedPLEG":false}'
      RUNTIME_CONFIG: '{"api/alpha":"true", "api/ga":"true"}'
      FOCUS: "."
      SKIP: \[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|In-tree.Volumes.\[Driver:.nfs\]|PersistentVolumes.NFS|Network.should.set.TCP.CLOSE_WAIT.timeout|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|should.provide.basic.identity
      # PARALLEL: true
      PARALLEL: ${{ matrix.parallel }}
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - name: run
        run: |
          curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && e2e-k8s.sh
      - name: check artifacts
        if: always()
        run: |
          ls _artifacts

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: kind_e2e_alpha_features_parallel_${{ matrix.parallel }}
          path: _artifacts

# 构建kubernetes容器镜像
  buildk8s:
    name: buildk8s
    uses: ./.github/workflows/kubernetes_build.yml
    with:
      repo: ${{ inputs.repo }}
      ref: ${{ inputs.ref }}

  pull-kubernetes-unit:
    name: pull-kubernetes-unit
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        goversion:
          - "go.mod"
          - "1.22.1"
    steps:
      - uses: actions/setup-go@v5
        if: matrix.goversion != 'go.mod'
        with:
          go-version: ${{ matrix.goversion }}
      - uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - uses: actions/setup-go@v5
        if: matrix.goversion == 'go.mod'
        with:
          go-version-file: go.mod
      - name: run
        run: |
          make test
      - name: check artifacts
        if: always()
        run: |
          mkdir -p _artifacts
          ls _artifacts

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: kind_e2e_alpha_features
          path: _artifacts


  k8scicp3:
    name: k8scicp3
    uses: ./.github/workflows/k8s_ci.yml
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        tests:
          - conformance
    with:
      repo: ${{ inputs.repo }}
      ref: ${{ inputs.ref }}
      kindversion: ${{ inputs.kindversion }}
      hydrophone: ${{ inputs.hydrophone }}
      testname: ${{ matrix.tests }}
      k8sCPCount: 3

  k8sci:
  #TODO push的话跳过,无法使用 inputs 参数, push的话加一个job手动传递参数
    name: k8sci
    uses: ./.github/workflows/k8s_ci.yml
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        tests:
          - conformance
          # - sig-apps
          # - statefulset
    with:
      repo: ${{ inputs.repo }}
      ref: ${{ inputs.ref }}
      kindversion: ${{ inputs.kindversion }}
      hydrophone: ${{ inputs.hydrophone }}
      testname: ${{ matrix.tests }}

