#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: k8s_ci_call
on:
  push:
    branches: [ k8s_ci_call ]
  schedule:
    - cron: '0 17 * * 0,1,2,3,4,5,6'
  workflow_dispatch:
    inputs:
      ref:
        description: 'source ref of kubernetes '
        required: false
        default: "master"
      repo:
        description: 'repo of kubernetes'
        required: false
        default: "kubernetes/kubernetes"
      kindVersion:
        description: 'kindVersion'
        required: false
        default: "v0.23.0"
        type: string
      hydrophone:
        description: 'hydrophone'
        required: false
        default: true
        type: boolean
      commitID:
        description: 'commitID'
        required: false
        default: "none"
        type: string
      #TODO ‰ΩøÁî®KindÁöÑmaster ÊûÑÂª∫kind bin
permissions:
  packages: write

env:
  KIND_VERSION: ${{ inputs.kindVersion }}
  GH_TOKEN: ${{ github.token }}
  GOFLAGS: "-p=2"

jobs:
# #/k8scicall
# TODO summary
# TODO ÊûÑÂª∫ÂÆå k8s ÂÆπÂô®ÈïúÂÉèÂêé Áõ¥Êé•ÂÆâË£Ö containerd, kubeadm ÈÉ®ÁΩ≤ k8s
# TODO Â∞ÜÈïúÂÉè push Âà∞ÈòøÈáå‰∫ëÂÆπÂô®ÈïúÂÉè‰ªìÂ∫ì
# TODO Ê∑ªÂä† controller-runtime ÁöÑ CI ÊµãËØï
# TODO Ê∑ªÂä†‰∏Ä‰∏™ custom-apiserver/AA ÁöÑ CI ÊµãËØï?
# TODO Ê∑ªÂä†‰∏Ä‰∫õÊ≤°ÊúâÊã¶Êà™ÊÄßÂΩ±ÂìçÁöÑ CEL Á≠ñÁï• ValidatingAdmissionPolicy 
# pull-kubernetes-conformance-kind-ipv6-parallel
# TODO ‰ΩøÁî®vagrantÊê≠Âª∫ËôöÊãüÊú∫,ÁÑ∂ÂêéÁî®openeuler/anolisos Êù•Ë∑ëÊµãËØï?
# ÂëΩÂêçËßÑËåÉ: pull-kubernetes-  --->  pk-

  buildkind:
    name: buildkind
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - uses: oras-project/setup-oras@main
      with:
        version: 1.2.0
    - name: checkoutactions
      uses: actions/checkout@v4
      with:
        repository: kubernetes-sigs/kind
        fetch-depth: 0
    - name: build 
      run: |
        make 
    - name: upload
      run: |
        oras login ghcr.io -u$GITHUB_REPOSITORY_OWNER -p${{ secrets.GITHUB_TOKEN }}
        mv bin/kind kind
        oras push ghcr.io/$GITHUB_REPOSITORY_OWNER/files:kind kind
        oras logout ghcr.io

  k8scicp3:
    name: k8scicp3
    needs: getcommitid
    uses: ./.github/workflows/k8s_ci.yml
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        tests:
        #TODO sig-apps
          - conformance
          - kind-e2e
          - ValidatingAdmissionPolicy
          - MutatingAdmissionPolicy
    with:
      repo: ${{ inputs.repo }}
      ref: ${{ inputs.ref }}
      kindversion: ${{ inputs.kindversion }}
      hydrophone: ${{ inputs.hydrophone }}
      testname: ${{ matrix.tests }}
      k8sCPCount: 3
      commitID: ${{ needs.getcommitid.outputs.commitID }}

  build-kindnode:
    name: build-kindnode-${{ inputs.ref }}
    uses: ./.github/workflows/kindnode_release_template.yml
    with:
      repo: kubernetes/kubernetes
      ref: ${{ inputs.ref }}
      imgname: testnode

  getcommitid:
    name: getcommitid
    needs: build-kindnode
    runs-on: ubuntu-22.04
    env:
      INPUT_COMMID_ID: ${{ inputs.commitID }}
    outputs:
      commitID: ${{ steps.gencommitid.outputs.commitID }}
      existTestnode: ${{ steps.gencommitid.outputs.existTestnode }}
      existKubebins: ${{ steps.gencommitid.outputs.existKubebins }}
    steps:
      - name: gen commitID
        id: gencommitid
        run: |
          echo "INPUT_COMMID_ID:$INPUT_COMMID_ID"
          echo "inputs.repo:"${{ inputs.repo }}
          if [ $INPUT_COMMID_ID != "none" ];then
            echo "commitID=$INPUT_COMMID_ID" >> "$GITHUB_OUTPUT"
            echo "existTestnode=false" >> "$GITHUB_OUTPUT"
            echo "existKubebins=false" >> "$GITHUB_OUTPUT"
          else
             git clone https://github.com/kubernetes/kubernetes -b ${{ inputs.ref }}
             cd kubernetes
             IMGTAG=`git describe --tags`
             LATEST_COMMIT=`git rev-parse HEAD`
             echo "commitID=$LATEST_COMMIT" >> "$GITHUB_OUTPUT"
             COMMIT_MESSAGE=`git log --pretty=format:"%s" $COMMIT_ID -1`
             echo "commitMsg=$COMMIT_MESSAGE" >> "$GITHUB_OUTPUT"

             IMAGE_EXIST=`oras manifest fetch ghcr.io/$GITHUB_REPOSITORY_OWNER/kindest/testnode:$KIND_VERSION-$IMGTAG  | grep schemaVersion | wc -l `
             if [ $IMAGE_EXIST -eq 1 ]; then
               echo "exist testnode"
               echo "existTestnode=true" >> "$GITHUB_OUTPUT"
             else 
              echo "existTestnode=false" >> "$GITHUB_OUTPUT"
             fi

             IMAGE_EXIST=`oras manifest fetch ghcr.io/$GITHUB_REPOSITORY_OWNER/kubebins:$IMGTAG | grep mediaType | wc -l `
             if [ $IMAGE_EXIST -eq 1 ]; then
               echo "exist kubebins"
               echo "existKubebins=true" >> "$GITHUB_OUTPUT"
             else 
              echo "existKubebins=false" >> "$GITHUB_OUTPUT"
             fi

          fi

      - name: Adding markdown
        run: |
          echo "### üöÄ"
          echo '### branch: ${{ inputs.ref }}' >> $GITHUB_STEP_SUMMARY
          echo '### commitID:${{ steps.gencommitid.outputs.commitID }}' >> $GITHUB_STEP_SUMMARY
          echo "### message: ${{ steps.gencommitid.outputs.commitMsg }}" >> $GITHUB_STEP_SUMMARY

  pk-e2e-kind:
    name: pk-e2e-kind
    needs: getcommitid
    # ÁõÆÂâçÈÉΩÊòØÊä•Èîô,ÊöÇÊó∂ËøôÊ†∑Áõ¥Êé•Ë∑≥ËøáËøô‰∏™CI
    if: ${{ needs.getcommitid.outputs.e2ekind }}
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        parallel:
        - true
        # - false
        branch: 
        - master 
    # env:
    #   FOCUS: "."
    #   PARALLEL: ${{ matrix.parallel }}
    #   # PARALLEL: true 
    #   SKIP: \[sig-storage\]\[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|NFS|nfs|inline.execution.and.attach|should.be.rejected.when.no.endpoints.exist
    steps:
      - uses: oras-project/setup-oras@main
        with:
          version: 1.2.0
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          # ref: ${{ inputs.ref }}
          ref: ${{ matrix.branch }}
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: run
        run: |
          #git reset --hard 77dfd63d1dbe24bd96e579a6bea5c4fb3732d81d
          #TODO kind commit 296749aa2de8577f6865e4db1870d2566a28d14b  support kube-proxy nftables mode ËØïËØïËøô‰∏™
          git clone https://github.com/kubernetes-sigs/kind 
          cd kind 
          git reset --hard 296749aa2de8577f6865e4db1870d2566a28d14b
          make 
          #hack/ci/e2e-k8s.sh
          cd ..
          export FOCUS="."
          #export FOCUS="should store data"
          #export PARALLEL=true
          export PARALLEL=${{ matrix.parallel }}
          #export SKIP="\[sig-storage\]|\[sig-storage, Slow\]|\[sig-storage\]\[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|NFS|nfs|inline.execution.and.attach|should.be.rejected.when.no.endpoints.exist"
          export SKIP="\[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|NFS|nfs|inline.execution.and.attach|should.be.rejected.when.no.endpoints.exist"

          curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/"
          wget https://github.com/kubernetes-sigs/kind/releases/download/${{inputs.kindVersion}}/kind-linux-amd64
          chmod +x kind-linux-amd64
          mv kind-linux-amd64 /usr/local/bin/kind 
          e2e-k8s.sh
          #curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && e2e-k8s.sh
      - name: check artifacts
        if: always()
        run: |
          docker ps -a 
          ls _artifacts
          # docker inspect kind-control-plane

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: kind_e2e_parallel_${{ matrix.parallel }}_${{ matrix.branch }}
          path: _artifacts

#TODO pull-kubernetes-node-e2e-containerd

  pk-e2e-kind-cloud-provider-loadbalancer:
    name: pk-e2e-kind-cloud-provider-loadbalancer
    runs-on: ubuntu-24.04
    needs: getcommitid
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@main
        with:
          version: 1.2.0
      # - name: checkoutactions
      #   uses: actions/checkout@v4
      #   with:
      #     repository: kubernetes/kubernetes
      #     fetch-depth: 0
      #     ref: ${{ inputs.ref }}
      # - name: checkoutactions
      #   uses: actions/checkout@v4
      #   with:
      #     repository: kubernetes-sigs/cloud-provider-kind
      #     fetch-depth: 0
      #     ref: main
      - name: clone 
        run: |
          git clone https://github.com/kubernetes/kubernetes -b ${{ inputs.ref }}
          cd kubernetes 
          git branch
      - name: run
        run: |
          mkdir gopath
          export GOPATH=$PWD/gopath
          mkdir -p gopath/src/k8s.io/
          OPWD=$PWD
          mv kubernetes gopath/src/k8s.io/
          mkdir -p gopath/src/sigs.k8s.io/
          cd $GOPATH/src/sigs.k8s.io/
          git clone https://github.com/kubernetes-sigs/cloud-provider-kind
          cd cloud-provider-kind
          curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && $GOPATH/src/sigs.k8s.io/cloud-provider-kind/hack/ci/e2e.sh

  integration:  
    name: integration
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - ubuntu-24.04
        etcd:
          - build-in
          - etcd-main
    needs: getcommitid
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - uses: oras-project/setup-oras@main
        with:
          version: 1.2.0
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: install etcd
        run: |
          if [ ${{ matrix.etcd }} = "build-in" ];then 
            hack/install-etcd.sh
          fi
          sudo mkdir -p $PWD/third_party/etcd/
          if [ ${{ matrix.etcd }} = "build-main" ];then 
            oras pull ghcr.io/$GITHUB_REPOSITORY_OWNER/files:etcd-latest
            chmod +x etcd
            chmod +x etcdctl
            chmod +x etcdutl
            mv etcd $PWD/third_party/etcd/
            mv etcdctl $PWD/third_party/etcd/
            mv etcdutl $PWD/third_party/etcd/
            #/usr/local/bin/
          fi

          ls $PWD/third_party/etcd/
      - name: run
        run: |
          # https://github.com/kubernetes/community/blob/master/contributors/devel/sig-testing/integration-tests.md#install-etcd-dependency
          ls 
          export PATH=$PATH:$PWD/third_party/etcd/
          make test-integration

  pk-integration:
    name: pk-integration
    runs-on: ubuntu-22.04
    needs: getcommitid
    # ÁõÆÂâçÈÉΩÊòØÊä•Èîô,ÊöÇÊó∂ËøôÊ†∑Áõ¥Êé•Ë∑≥ËøáËøô‰∏™CI
    if: ${{ needs.getcommitid.outputs.integration }}
    env:
      GA_ONLY: true
      PARALLEL: true
      KUBE_INTEGRATION_TEST_MAX_CONCURRENCY: "8"
      KUBE_TIMEOUT: "-timeout=1h30m"
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@main
        with:
          version: 1.2.0
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - name: run
        run: |
          mkdir -p gopath 
          cd gopath
          export GOPATH=$PWD
          cd ..
          mkdir -p gopath/src/k8s.io/
          OPWD=$PWD
          cd gopath/src/k8s.io/
          git clone https://github.com/kubernetes/kubernetes -b ${{ inputs.ref }}
          cd kubernetes
          export WORKSPACE=$PWD
          hack/jenkins/test-dockerized.sh

  conformance-kind-ga-only-parallel:
    name: conformance-kind-ga-only-parallel
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - ubuntu-24.04
          # - ubuntu-latest
    runs-on: ${{ matrix.os }}
    needs: getcommitid
    env:
      GA_ONLY: true
      PARALLEL: true
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@main
        with:
          version: 1.2.0
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - name: run
        run: |
          curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && e2e-k8s.sh
      - name: check artifacts
        if: always()
        run: |
          ls _artifacts

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: conformance_kind_ga_only_parallel_${{ matrix.os }}
          path: _artifacts

  # non-blocking
  pk-e2e-kind-alpha-features-sig-storage:
    name: pk-e2e-kind-alpha-features-sig-storage
    runs-on: ${{ matrix.runos }}
    # ÁõÆÂâçÈÉΩÊòØÊä•Èîô,ÊöÇÊó∂ËøôÊ†∑Áõ¥Êé•Ë∑≥ËøáËøô‰∏™CI
    if: ${{ needs.getcommitid.outputs.sigStorage }}
    needs: getcommitid
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        parallel:
        - true
        # - false
        focus:
        - \[sig-storage\]
        # # - \[LocalVolumeType: blockfs\]
        # - blockfs
        #TODO Ëß£ÂÜ≥ÂÆåsig-storageÊµãËØïÈóÆÈ¢òÂêéÊîæÂºÄ‰∏äËø∞Ê≥®ÈáäÂπ∂‰∏îÂà†Èô§‰∏ãÈù¢ÁöÑConformanceÊµãËØï(ÁõÆÂâçÂè™ÊòØÁî®Êù•Âç†‰∏Ä‰∏™‰ΩçÁΩÆ)
        # - \[Conformance\]
        runos:
        - ubuntu-22.04
        - ubuntu-24.04
    env:
      FEATURE_GATES: '{"AllAlpha":true,"EventedPLEG":false}'
      RUNTIME_CONFIG: '{"api/alpha":"true", "api/ga":"true"}'
      # FOCUS: \[sig-storage\]
      FOCUS: ${{ matrix.focus }}
      SKIP: \[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|In-tree.Volumes.\[Driver:.nfs\]|PersistentVolumes.NFS|Network.should.set.TCP.CLOSE_WAIT.timeout|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|should.provide.basic.identity
      # PARALLEL: true
      PARALLEL: ${{ matrix.parallel }}
    steps:
      # - uses: actions/setup-go@v5
      #   with:
      #     go-version: '1.22'
      - uses: oras-project/setup-oras@main
        with:
          version: 1.2.0
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: run
        run: |
          curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && e2e-k8s.sh
      - name: check artifacts
        if: always()
        run: |
          ls _artifacts

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: kind_e2e_alpha_features_sig_storage_parallel_${{ matrix.parallel }}
          path: _artifacts

  # non-blocking
  pk-e2e-kind-alpha-features:
    name: pk-e2e-kind-alpha-features
    runs-on: ${{ matrix.os }}
    needs: getcommitid
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        parallel:
        - true
        # - false
        os: 
        - ubuntu-22.04
        - ubuntu-24.04
        - ubuntu-latest
        ref: 
        - master 
        - release-1.30
        - release-1.29
    env:
      FEATURE_GATES: '{"AllAlpha":true,"EventedPLEG":false}'
      RUNTIME_CONFIG: '{"api/alpha":"true", "api/ga":"true"}'
      FOCUS: "."
      # SKIP: \[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|In-tree.Volumes.\[Driver:.nfs\]|PersistentVolumes.NFS|Network.should.set.TCP.CLOSE_WAIT.timeout|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|should.provide.basic.identity
      SKIP: \[sig-storage\]|\[sig-storage, Slow\]|\[sig-storage\]\[Slow\]|\[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|In-tree.Volumes.\[Driver:.nfs\]|PersistentVolumes.NFS|Network.should.set.TCP.CLOSE_WAIT.timeout|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|should.provide.basic.identity
      # PARALLEL: true
      PARALLEL: ${{ matrix.parallel }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - uses: oras-project/setup-oras@main
        with:
          version: 1.2.0
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ matrix.ref }}
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: run
        run: |
          curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && e2e-k8s.sh
      - name: check artifacts
        if: always()
        run: |
          ls _artifacts

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: kind_e2e_alpha_features_parallel_${{ matrix.ref }}_${{ matrix.parallel }}_${{ matrix.os }}
          path: _artifacts

# ÊûÑÂª∫kubernetesÂÆπÂô®ÈïúÂÉè
  buildk8s:
    name: buildk8s-${{ inputs.repo }}
    #TODO ÊöÇÊó∂ÂÖ≥Èó≠
    if: ${{ needs.getcommitid.outputs.buildk8s }}
    uses: ./.github/workflows/kubernetes_release_template.yml
    with:
      repo: ${{ inputs.repo }}
      ref: ${{ inputs.ref }}
  pk-unit:
    name: pk-unit
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - ubuntu-24.04
        goversion:
          - "go.mod"
          # - "1.22.1"
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: kubernetes/kubernetes
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - uses: actions/setup-go@v5
        if: matrix.goversion != 'go.mod'
        with:
          go-version: ${{ matrix.goversion }}
      - uses: oras-project/setup-oras@main
        with:
          version: 1.2.0
      - uses: actions/setup-go@v5
        if: matrix.goversion == 'go.mod'
        with:
          go-version-file: go.mod
      - name: run
        run: |
          make test
      - name: check artifacts
        if: always()
        run: |
          mkdir -p _artifacts
          ls _artifacts

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: always()
        with:
          name: pull_kubernetes_unit
          path: _artifacts


  k8sci:
  #TODO pushÁöÑËØùË∑≥Ëøá,Êó†Ê≥ï‰ΩøÁî® inputs ÂèÇÊï∞, pushÁöÑËØùÂä†‰∏Ä‰∏™jobÊâãÂä®‰º†ÈÄíÂèÇÊï∞
    name: k8sci
    needs: getcommitid
    uses: ./.github/workflows/k8s_ci.yml
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        tests:
          - conformance
          # - sig-apps
          # - statefulset
    with:
      repo: ${{ inputs.repo }}
      ref: ${{ inputs.ref }}
      kindversion: ${{ inputs.kindversion }}
      hydrophone: ${{ inputs.hydrophone }}
      testname: ${{ matrix.tests }}
      commitID: ${{ needs.getcommitid.outputs.commitID }}
      existTestnode: ${{ needs.getcommitid.outputs.existTestnode }}
      existKubebins: ${{ needs.getcommitid.outputs.existKubebins }}

