#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: karmada_ci
on:
  push:
    branches: [ karmada_ci ]
  workflow_call:
    inputs:
      ref:
        description: 'source ref of karmada '
        required: false
        default: "master"
        type: string
      repo:
        description: 'repo of karmada'
        required: false
        default: "karmada-io/karmada"
        type: string


jobs:

  build-karmada:
    name: build-karmada
    permissions:
      packages: write
    runs-on: ubuntu-22.04
    outputs:
      imgtag: ${{ steps.checkimgs.outputs.imgtag }}
    steps:
      - name: make default value
        id: genoutputs
        env:
          REF: ${{ github.event.inputs.ref }}
          REPO: ${{ github.event.inputs.repo }}
        run: |
          if [ "$REF" = "" ];then
              echo "ref=master" >> "$GITHUB_OUTPUT"
          else
              echo "ref=$REF" >> "$GITHUB_OUTPUT"
          fi

          if [ "$REPO" = "" ];then
              echo "repo=kubernetes/kubernetes" >> "$GITHUB_OUTPUT"
          else
              echo "repo=$REPO" >> "$GITHUB_OUTPUT"
          fi

      - name: checkoutactions
        uses: actions/checkout@v4
        with:
          repository: karmada-io/karmada
          # repository: ${{ inputs.repo }}
          fetch-depth: 0
          ref: ${{ inputs.ref }}

      - name: checkimgs
        id: checkimgs
        run: |
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          IMGTAG=`git describe --tags`
          echo "imgtag=${IMGTAG}" >> "$GITHUB_OUTPUT"
          echo "check images for ghcr.io/liangyuanpeng/karmada/test:"$IMGTAG

          IMAGE_EXIST=`oras manifest fetch ghcr.io/liangyuanpeng/karmada/test:$IMGTAG  | grep schemaVersion | wc -l `
          if [ $IMAGE_EXIST -eq 1 ]; then
            echo "exist test image"
            echo "exist=true" >> "$GITHUB_OUTPUT"
          else 
            echo "exist=false" >> "$GITHUB_OUTPUT"
          fi

      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        if: steps.checkimgs.outputs.exist != 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed, if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: false

      - uses: actions/setup-go@v5
        if: steps.checkimgs.outputs.exist != 'true'
        with:
          go-version: '1.22'
      - uses: oras-project/setup-oras@v1
        if: steps.checkimgs.outputs.exist != 'true'
        with:
          version: 1.0.0
      - name: clean
        if: steps.checkimgs.outputs.exist != 'true'
        run: |
          docker login ghcr.io -uliangyuanpeng -p${{ secrets.GITHUB_TOKEN }}
          nohup docker rmi `docker images -aq` &
          rm -rf /opt/hostedtoolcache/CodeQL
          rm -rf /opt/hostedtoolcache/node
          rm -rf /opt/hostedtoolcache/Python


      - name: build karmada image
        id: build-karmada-image
        if: steps.checkimgs.outputs.exist != 'true'
        run: |
          IMGTAG=`git describe --tags`
          make images

      - name: check 
        run: |
          docker images
          echo "IMGTAG:$IMGTAG"
