# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# https://dev.azure.com/liangyuanpeng/lanactions
trigger:
  branches:
    include:
      - main
      - pulsar

pr:
  - "*"

schedules:
  # - cron: "0 0,1,4,6,8,22 * * *" # 每天半夜构建
  - cron: "0 22 * * *" 
    displayName: Daily midnight build
    always: true #默认是上次成功运行后或有新的提交
    branches:
      include:
      - main
      # - pulsar

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build 
  jobs:
  - job: BuildKindNode
    strategy:
      matrix:
      #TODO 机器人自动化提PR更新下面的列表
        master:
          ref: 'master'
        # release-1.30:
        #   ref: 'release-1.30'
        # release-1.29:
        #   ref: 'release-1.29'
        # release-1.28:
        #   ref: 'release-1.28'
    steps:
    - script: |
        sudo rm -rf /usr/local/lib/android || true

        sudo apt-get remove -y '^aspnetcore-.*' || echo "::warning::The command [sudo apt-get remove -y '^aspnetcore-.*'] failed to complete successfully. Proceeding..."
        sudo apt-get remove -y '^dotnet-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^dotnet-.*' --fix-missing] failed to complete successfully. Proceeding..."
        sudo apt-get remove -y '^llvm-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^llvm-.*' --fix-missing] failed to complete successfully. Proceeding..."
        sudo apt-get remove -y 'php.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y 'php.*' --fix-missing] failed to complete successfully. Proceeding..."
        sudo apt-get remove -y '^mongodb-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^mongodb-.*' --fix-missing] failed to complete successfully. Proceeding..."
        sudo apt-get remove -y '^mysql-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^mysql-.*' --fix-missing] failed to complete successfully. Proceeding..."
        sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri --fix-missing || echo "::warning::The command [sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri --fix-missing] failed to complete successfully. Proceeding..."
        sudo apt-get remove -y google-cloud-sdk --fix-missing || echo "::debug::The command [sudo apt-get remove -y google-cloud-sdk --fix-missing] failed to complete successfully. Proceeding..."
        sudo apt-get remove -y google-cloud-cli --fix-missing || echo "::debug::The command [sudo apt-get remove -y google-cloud-cli --fix-missing] failed to complete successfully. Proceeding..."
        sudo apt-get autoremove -y || echo "::warning::The command [sudo apt-get autoremove -y] failed to complete successfully. Proceeding..."
        sudo apt-get clean || echo "::warning::The command [sudo apt-get clean] failed to complete successfully. Proceeding..."
      displayName: "clean packages"

    - script: |
        docker images
        go version
        free -mh
        df -h 
        rm -rf /opt/hostedtoolcache/CodeQL
        rm -rf /opt/hostedtoolcache/node
        rm -rf /opt/hostedtoolcache/Python
        docker rmi `docker images -aq`
        
        df -h
        pwd 
        ls
        uname -a
        ORAS_VERSION=${ORAS_VERSION:-"1.2.0"}
        if [ -f /usr/local/bin/oras ];
        then
          echo "exist oras!"
          oras version
        else
          wget -q https://github.com/oras-project/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz
          tar -xf oras_${ORAS_VERSION}_linux_amd64.tar.gz && rm -f oras_${ORAS_VERSION}_linux_amd64.tar.gz
          mv oras /usr/local/bin/
          echo "download oras finished!"
          oras version
        fi

        # if [ -f /usr/local/bin/skopeo ];
        # then
        #   echo "exist skopeo!"
        #   oras version
        # else
        #   skopeo
        # fi
      displayName: "check env"

    - script: |
        #TODO 用脚本来构建镜像,oras pull
        export GOFLAGS="-p=2"
        git clone https://github.com/kubernetes/kubernetes
        cd kubernetes 
        git checkout $(ref)

        export KIND_VERSION=v0.23.0

        COMMIT_ID=`git rev-parse HEAD`
        IMAGE_EXIST=`oras manifest fetch ghcr.io/liangyuanpeng/kindest/testnode:$KIND_VERSION-$COMMIT_ID  | grep schemaVersion | wc -l `
        if [ $IMAGE_EXIST -eq 1 ]; then
          echo "exist image of ghcr.io/liangyuanpeng/kindest/testnode:$KIND_VERSION-$COMMIT_ID"
          exit 0
        else 
          echo "have not exist image of ghcr.io/liangyuanpeng/kindest/testnode:$KIND_VERSION-$COMMIT_ID"
        fi

        cd ..
        export KUBEROOT=$PWD/kubernetes
        git clone https://github.com/kubernetes-sigs/kind
        cd kind
        #TODO 自动使用最新的tag
        git checkout $KIND_VERSION
        hack/release/build/push-node.sh 
        #skopeo copy --dest-authfile $HOME/.docker/config.json  docker://ghcr.io/liangyuanpeng/kindest/testnode:$KUBE_VERSION docker://ghcr.io/liangyuanpeng/kindest/testnode:$KIND_VERSION-$COMMIT_ID
        docker images
        df -h
      displayName: "build kind node"
  # - job: BuildKubernetes
  #   strategy:
  #       matrix:
  #         master:
  #           ref: 'master'
  #         release-1.30:
  #           ref: 'release-1.30'
  #         release-1.29:
  #           ref: 'release-1.29'
  #         release-1.28:
  #           ref: 'release-1.28'
  #   steps:
  #   - script: |
  #       sudo rm -rf /usr/local/lib/android || true

  #       sudo apt-get remove -y '^aspnetcore-.*' || echo "::warning::The command [sudo apt-get remove -y '^aspnetcore-.*'] failed to complete successfully. Proceeding..."
  #       sudo apt-get remove -y '^dotnet-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^dotnet-.*' --fix-missing] failed to complete successfully. Proceeding..."
  #       sudo apt-get remove -y '^llvm-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^llvm-.*' --fix-missing] failed to complete successfully. Proceeding..."
  #       sudo apt-get remove -y 'php.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y 'php.*' --fix-missing] failed to complete successfully. Proceeding..."
  #       sudo apt-get remove -y '^mongodb-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^mongodb-.*' --fix-missing] failed to complete successfully. Proceeding..."
  #       sudo apt-get remove -y '^mysql-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^mysql-.*' --fix-missing] failed to complete successfully. Proceeding..."
  #       sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri --fix-missing || echo "::warning::The command [sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri --fix-missing] failed to complete successfully. Proceeding..."
  #       sudo apt-get remove -y google-cloud-sdk --fix-missing || echo "::debug::The command [sudo apt-get remove -y google-cloud-sdk --fix-missing] failed to complete successfully. Proceeding..."
  #       sudo apt-get remove -y google-cloud-cli --fix-missing || echo "::debug::The command [sudo apt-get remove -y google-cloud-cli --fix-missing] failed to complete successfully. Proceeding..."
  #       sudo apt-get autoremove -y || echo "::warning::The command [sudo apt-get autoremove -y] failed to complete successfully. Proceeding..."
  #       sudo apt-get clean || echo "::warning::The command [sudo apt-get clean] failed to complete successfully. Proceeding..."
  #     displayName: "clean packages"

  #   - script: |
  #       docker images
  #       go version
  #       free -mh
  #       df -h 
  #       rm -rf /opt/hostedtoolcache/CodeQL
  #       rm -rf /opt/hostedtoolcache/node
  #       rm -rf /opt/hostedtoolcache/Python
  #       docker rmi `docker images -aq`
        
  #       df -h
  #       pwd 
  #       ls
  #       uname -a
  #     displayName: "check env"

  #   - script: |
  #       export GOFLAGS="-p=2"
  #       git clone https://github.com/kubernetes/kubernetes
  #       cd kubernetes 
  #       git checkout $(ref)
  #       KUBE_BUILD_CONFORMANCE=y KUBE_BUILD_PLATFORMS="linux/amd64 linux/arm64" make quick-release-images
  #       mkdir -p _output/release-images
  #       du -h _output/release-images
  #       df -h

  #       docker load -i _output/release-images/amd64/kube-apiserver.tar
  #       rm -f _output/release-images/amd64/kube-apiserver.tar
  #       docker load -i _output/release-images/amd64/kube-controller-manager.tar
  #       rm -f _output/release-images/amd64/kube-controller-manager.tar
  #       docker load -i _output/release-images/amd64/kube-proxy.tar
  #       rm -f _output/release-images/amd64/kube-proxy.tar
  #       docker load -i _output/release-images/amd64/kube-scheduler.tar
  #       rm -f _output/release-images/amd64/kube-scheduler.tar
  #       docker load -i _output/release-images/amd64/conformance-amd64.tar
  #       rm -f _output/release-images/amd64/conformance-amd64.tar

  #       docker load -i _output/release-images/arm64/kube-apiserver.tar
  #       rm -f _output/release-images/arm64/kube-apiserver.tar
  #       docker load -i _output/release-images/arm64/kube-controller-manager.tar
  #       rm -f _output/release-images/arm64/kube-controller-manager.tar
  #       docker load -i _output/release-images/arm64/kube-proxy.tar
  #       rm -f _output/release-images/arm64/kube-proxy.tar
  #       docker load -i _output/release-images/arm64/kube-scheduler.tar
  #       rm -f _output/release-images/arm64/kube-scheduler.tar
  #       docker load -i _output/release-images/arm64/conformance-arm64.tar
  #       rm -f _output/release-images/arm64/conformance-arm64.tar

  #       docker images

  #     displayName: "build kubernetes"



